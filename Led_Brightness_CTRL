#include <msp430.h>

unsigned int ADC_Value;

int main(void)
{
    WDTCTL = WDTPW | WDTHOLD; // stop watchdog timer

    P1DIR |= BIT5; // AIN1
    P1OUT |= BIT5;

    P1DIR |= BIT7; // PWMA
    P1OUT |= BIT7;

    P1DIR |= BIT6; // AIN2
    P1OUT &= ~BIT6;

    P4DIR |= BIT7; // LED on P4.7
    P4OUT &= ~BIT7; // Initialize LED OFF

    P1SEL1 = BIT2;
    P1SEL0 = BIT2;

    TB0CTL |= TBCLR;
    TB0CTL |= TBSSEL__SMCLK;
    TB0CTL |= MC__UP;
    TB0CCR0 = 4096;
    TB0CCR1 = 2000;

    TB0CCTL0 |= CCIE;
    TB0CCTL0 &= ~CCIFG;
    TB0CCTL1 |= CCIE;
    TB0CCTL1 &= ~CCIFG;

    ADCCTL0 &= ~ADCSHT;
    ADCCTL0 |= ADCSHT_2;
    ADCCTL0 |= ADCON;

    ADCCTL1 |= ADCSSEL_2;
    ADCCTL1 |= ADCSHP;

    ADCCTL2 &= ~ADCRES;
    ADCCTL2 |= ADCRES_2;

    ADCMCTL0 |= ADCINCH_2;

    ADCIE |= ADCIE0;

    __enable_interrupt();

    while (1)
    {
        ADCCTL0 |= ADCENC + ADCSC;
        __bis_SR_register(CPUOFF + GIE); // Enter LPM0
    }

    return 0;
}

#pragma vector=TIMER0_B0_VECTOR
__interrupt void ISR_TB0_CCR0(void)
{
    P1OUT |= BIT7; // Motor ON
    P4OUT |= BIT7; // LED ON
    TB0CCTL0 &= ~CCIFG;
}

#pragma vector=TIMER0_B1_VECTOR
__interrupt void ISR_TB0_CCR1(void)
{
    P1OUT &= ~BIT7; // Motor OFF
    P4OUT &= ~BIT7; // LED OFF
    TB0CCTL1 &= ~CCIFG;
}

#pragma vector=ADC_VECTOR
__interrupt void ADC_ISR(void)
{
    ADC_Value = ADCMEM0;
    TB0CCR1 = ADC_Value;
    __bic_SR_register_on_exit(CPUOFF); // Exit LPM0
}
